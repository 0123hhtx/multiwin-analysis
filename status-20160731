1、目前完成的内容：

      多窗口已成型，包括应用的多窗口，相互间的重叠，焦点切换，改变大小，同状态栏上对应的小窗口的互动等。
      目前自己总共提交了144个补丁（git log --author=chengang --oneline | wc -l），除了完成以上功能以外，
      解决了大概40-50个bug（有时候几个补丁对应于一个bug）。

2、遇到的难点：

      原先不仅对多窗口不熟悉，而且对整个frameworks都不熟悉（有铁托的aosp-4.4的代码，对我们非常有帮
      助）。所以在添加功能，以及解决大部分的bugs时，基本都需要摸索，逐步找到方法，所以耗时很多，而
      且重复性的工作也很多（有些解决方法不治本，所以会有反复，反复几次后，才能逐步找到根本解决方法）。

      对于很多代表性的闭源应用（例如WPS，QQ，微信，微软Office等），在多窗口下有各式各样的小问题，
      其主要原因是这些应用没有考虑到多窗口环境（始终以为自己是在全屏模式，而且状态栏一定是在上方，并
      与其有交互），分析这类闭源应用，要比分析开源应用明显复杂。

      由于团队新组建，人员缺乏，而且大家经验都不足，所以个人的时间精力不能全部投入到多窗口的开发，目
      前，全部投入多窗口的有效时间大概在（50-60%左右），而且由于事务来回切换，导致工作效率相对较低，
      具体的其他事务如下：

             由于要支持其他非多窗口的功能（例如开始菜单，通知栏，中间层等），需要分出时间去处理支持。
             对于多人开发，代码Review和合并，需要分出较多时间去处理（例如合并应用开发人员的代码补丁）。
             对于人员招聘（清华实验室，以及一铭公司等），需要分出时间去处理。
             对于一些管理上的事务，需要去协助，对于产品层面的一些事务，有时也需要偶尔参与一下。
             同新人，学生，以及有一定经验的人员的技术方面的沟通交流，需要分出一部分时间去支持。

3、下一步：

       目前存在的问题：

              目前依旧有15-20个关于多窗口的bugs需要解决，其中有些是关于对话框的处理，目前经验依旧不足（没
              有根本解决问题），对于这15-20个问题，对于只是我个人来做，大概需要将近一个月的时间才能基本解
              决完毕。

              目前框架层的一些其他功能性的问题也需要解决（大概有5-7个），这些问题即同应用层相关，又同中间
              层相关（例如有些应用不识别有线网卡，这同应用层、框架层、中间层都相关，需实现一个虚拟网卡），
              个人估计，这5-7个问题，对于只是我个人来做，大概需要一个月左右的时间才能大体解决完毕。

              目前系统的性能和稳定性也需要考虑，目前相关的问题有8-10个，这些问题大部分属于全局性问题，而且
              很可能aosp-x86，甚至原生aosp也可能有问题。个人估计，这些问题大概需要一到两个月才能大体解决完
              毕。不过这些问题不太明显，可能不会影响发布，所以可能不会那么紧急。

       处理方案：

              对于目前多窗口的bugs，更需要总结归纳经验，由此来根本解决。同时培养目前的人员来逐步有能力去分
              担解决目前的相关的bugs（其实有经验的应用开发人员，都有这个潜质去解决这些问题）。

              对于框架层的一些功能性问题，其实并不难解决，但目前来说，还是需要我这里先解决几个，并总结一些
              解决相关问题的经验，这样后面就可以有人跟进了。同时对于应用层和中间层相关的部分，相关的人员应
              该能提供明显的协助。

              对于性能稳定性相关的问题，有些是比较简单的（例如有些通过版本对比即可解决，有些只要简单的段错
              误堆栈分析即可），但有些可能就比较复杂（也包括通常的段错误）。这时候就需要有一套相应的调试方
              法和分析方法。具体方法如下：

                     对于中间层、内核、框架层、应用层等都有相关的调试方法和分析方法，但都需要一定的阅读反汇编
                     代码的能力，以及可以快速阅读大量C/C++/Java代码的能力。对于调试C/C++代码，可直接使用gdb，
                     而对于调试框架层和应用层的代码，使用Android Studio即可（有可能需要详细的配置和反复地挂接）。

                     而对于那些需要进行转译的部分（arm转x86_64），目前可以通过对比arm平台运行（消除转译），
                     来进行分析。如果确有必要，则需要调试相关的虚拟机（也有相关的调试方法，例如把虚拟机当调试
                     器使用），但相对来说会更复杂一些。这需要对汇编指令和中间语言足够熟悉，并可看大量汇编代码。


