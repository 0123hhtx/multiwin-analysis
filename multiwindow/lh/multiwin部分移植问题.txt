multiwindow部分移植问题和今后可能要解决的问题

从multiwin-7.1一直到multiwin-8.0的过程中发现并解决了一些问题，同时还存在一些今后需要解决的问题，简单的列一下以备参考

1.方法变更：

由于方法变更并不是特别的多，因此没有对这类方法变更进行系统的总结。对multiwin开发影响较大的主要应该就是ActivityManagerNative的变化，task和stack不在可见，转为通过getTask()方法和getStack()方法来获取。还有就是Task在不同Stack间移动的方法发生了比较大的变化。

2.Task的resizemode

multiwin-8.0中为Task新增了ResizeMode选项。其中对缩放影响较大的主要是一类会维持Activity朝向的resizemode。这类参数数值对窗口操作影响的具体表征有两点：

1是横竖朝向切换按键在遇到具有朝向锁定的Activity时无法生效

2是拖动缩放修改宽高中的一方导致朝向发生变化时，另一方会随之变化以保持朝向

对于缩放来说我认为这种现象是合理的，朝向切换则需要进行一定的修改。

对于resizemode的存在，我认为主要由以下两点处理思路：

（1）.在OpenThos1.0中，我们从没有根据应用的要求锁定过窗口朝向，事实证明在5.1的应用背景下，这种方法一般不会产生问题（在实现了朝向改变方法之后）。在7.1中aosp就已经在freeform模式下实现了灵活根据窗口大小来改变朝向的功能，在8.0中这一实现理论上仍旧生效。也就是我们仍然可以忽略resizemode的存在来强制随意操作窗口的宽高。当然也需要付出这种操作带来问题时解决的代价。

（2）.既然resizeMode存在，就不应该无视其去操作窗口。目前能够想到的一种方法是当能够读取到应用对朝向的要求时，除非应用自身申请新的朝向（例如setRequestedOrientation方法）以外，系统应在任何窗口操作时维持其朝向。（例如朝向切换按钮变为灰度，缩放时维持系统缩放策略等）一次来保证应用正常运行。

至于使用上述何种策略，具体如何实现还需进一步商讨。

3.setRequestedOrientation方法仍旧不会作用在FreeForm情况下，因此对该方法的处理仍需要进行。目前一个可行的策略是截获该方法并同时修改对应Activity的ResizeMode和requestOrientation，并将其进行resize，使其满足所需求的朝向。根据8.0configuration方面的源码，这个过程系统会自动处理configuration的变化

4.虽然是题外话，不过日历应用不适应窗口缩放的问题比较严重，似乎有必要进行修正或者替换应用。